diff --git a/MuscleMemory/LaunchScreen.swift b/MuscleMemory/LaunchScreen.swift
index 2a0c698..b5f9490 100644
--- a/MuscleMemory/LaunchScreen.swift
+++ b/MuscleMemory/LaunchScreen.swift
@@ -29,7 +29,7 @@ struct LaunchScreen: View {
         .background(Color.launch)
         
         .onAppear {
-            DispatchQueue.main.asyncAfter(deadline:.now() + 1.5) {
+            DispatchQueue.main.asyncAfter(deadline:.now() + 0.7) {
                 //navPath.path.append(NavPathItem.home)
                 navPath.navigate(to: .home)
             }
diff --git a/MuscleMemory/NotionImportPageView.swift b/MuscleMemory/NotionImportPageView.swift
index fb413b5..29a1b27 100644
--- a/MuscleMemory/NotionImportPageView.swift
+++ b/MuscleMemory/NotionImportPageView.swift
@@ -9,14 +9,15 @@ import SwiftUI
 
 struct NotionImportPageView: View {
     
-    @State private var animation: Double = 0.0
+    @State private var maskHeight: CGFloat = 0
+    @State private var borderOpacity: Double = 1.0
+        
     
     @Environment(\.openURL) private var openURLRedirect
     @Environment(\.colorScheme) var colorScheme
     private var elementOpacityDark: Double { colorScheme == .dark ? 0.1 : 0.5 }
     private var textOpacity: Double { colorScheme == .dark ? 0.8 : 0.8 }
     
-    
     var body: some View {
         
         VStack {
@@ -72,68 +73,91 @@ struct NotionImportPageView: View {
                         
                         
                         
-                        Button(action: {  if let redirect = URL(string: "https://api.notion.com/v1/oauth/authorize?client_id=138d872b-594c-8050-b985-0037723b58e0&response_type=code&owner=user&redirect_uri=https%3A%2F%2Fnotionauthbridge-rhuwa73w2a-uc.a.run.app%2Fcallback%3Fcode%3DAUTHORIZATION_CODE") {
-                            openURLRedirect(redirect)
+                        Button(action: {
+                            maskHeight = 0
+                            borderOpacity = 1.0
                             
-                        }
+                            withAnimation(.easeInOut(duration: 0.1)) {
+                                maskHeight = 60
+                            } completion: {
+                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
+                                    withAnimation(.linear(duration: 0.2)) {
+                                        borderOpacity = 0.0
+                                    } completion: {
+                                        maskHeight = 0
+                                    }
+                                }
+                            }
                             
+                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
+                                if let redirect = URL(string: "https://api.notion.com/v1/oauth/authorize?client_id=138d872b-594c-8050-b985-0037723b58e0&response_type=code&owner=user&redirect_uri=https%3A%2F%2Fnotionauthbridge-rhuwa73w2a-uc.a.run.app%2Fcallback%3Fcode%3DAUTHORIZATION_CODE") {
+                                    openURLRedirect(redirect)
+                                }
+                            }
                         }) {
                             RoundedRectangle(cornerRadius: 20)
                                 .fill(Color.white)
                                 .frame(width: 297, height: 43)
                                 .foregroundStyle(Color.white)
                                 .opacity(0.75)
-                                .modifier(animatedBorderStroke(animatableData: animation))
-                            }
-                        
-                        .onTapGesture {
-                            withAnimation(.linear(duration: 1).repeatCount(1)) {
-                                animation = 360
-                            }
+                                .padding(3)
+                                .overlay(
+                                    RoundedRectangle(cornerRadius: 24)
+                                        .stroke(Color.white, lineWidth: 2)
+                                        .opacity(borderOpacity)
+                                        .blur(radius: 0.5)
+                                        .mask(
+                                            VStack {
+                                                Rectangle()
+                                                    .frame(width: 350, height: maskHeight)
+                                                Spacer()
+                                            }
+                                                .blur(radius: 2)
+                                        )
+                                )
                         }
                         Text("Import page")
-                                .foregroundStyle(Color.black)
-                                .fontWeight(.medium)
-                            
-                        }
-                        .padding(.top, 150)
+                            .foregroundStyle(Color.black)
+                            .fontWeight(.medium)
+                        
                     }
-                    
+                    .padding(.top, 150)
                 }
                 
-                Spacer()
-                Divider()
-                    .padding()
+            }
+            
+            Spacer()
+            Divider()
+                .padding()
+            
+            HStack {
                 
-                HStack {
-                    
-                    NavigationLink(destination: MainMenu()) {
-                        Image("menuButton")
-                    }
-                    .frame(maxWidth: .infinity)
-                    
-                    
-                    NavigationLink(destination: SettingsView()) {
-                        Image("settingsButton")
-                        
-                    }
-                    .frame(maxWidth: .infinity)
+                NavigationLink(destination: MainMenu()) {
+                    Image("menuButton")
+                }
+                .frame(maxWidth: .infinity)
+                
+                
+                NavigationLink(destination: SettingsView()) {
+                    Image("settingsButton")
                     
-                    NavigationLink(destination: NotionImportPageView()) {
-                        Image("notionImportButton")
-                    }
-                    .frame(maxWidth: .infinity)
-                    .padding(.horizontal)
                 }
+                .frame(maxWidth: .infinity)
+                
+                NavigationLink(destination: NotionImportPageView()) {
+                    Image("notionImportButton")
+                }
+                .frame(maxWidth: .infinity)
+                .padding(.horizontal)
             }
-            .frame(maxWidth: .infinity, maxHeight: .infinity)
-            .background(.mmBackground)
-            .navigationBarBackButtonHidden()
         }
-        
+        .frame(maxWidth: .infinity, maxHeight: .infinity)
+        .background(.mmBackground)
+        .navigationBarBackButtonHidden()
     }
     
-    #Preview {
-        NotionImportPageView()
-    }
+}
 
+#Preview {
+    NotionImportPageView()
+}
diff --git a/MuscleMemory/UXDeclarations.swift b/MuscleMemory/UXDeclarations.swift
index b70515b..7970cf0 100644
--- a/MuscleMemory/UXDeclarations.swift
+++ b/MuscleMemory/UXDeclarations.swift
@@ -9,35 +9,18 @@ import Foundation
 import SwiftUI
 
 
-    struct animatedBorderStroke: ViewModifier, Animatable {
-        private let borderStrokeWidth: Double = 0.1
-        @State private var startAtTop: Bool = false
+struct AnimatedBorderStroke: ViewModifier, Animatable {
+    private let borderStrokeWidth: Double = 0.1
+    @State private var startAtTop: Bool = false
+    
+    
+    var animatableData: Double
+    
+    func body(content: Content) -> some View {
+        content
         
-        
-        var animatableData: Double
-        
-        func body(content: Content) -> some View {
-            content
-            .overlay(
-                GeometryReader { geometry in
-                    RoundedRectangle(cornerRadius: startAtTop ? 0: 52)
-                        .stroke(AngularGradient(stops: [.init(color: .white, location: 0),
-                            .init(color: .white, location: 0.1),
-                            .init(color: .white, location: 0.4),
-                            .init(color: .white, location: 0.5)], center: .center, angle: .degrees(animatableData)))
-                            .frame(width: geometry.size.width - CGFloat(borderStrokeWidth), height: geometry.size.height - CGFloat(borderStrokeWidth))
-                            .padding(.top, CGFloat(borderStrokeWidth) / 2)
-                            .padding(.leading, CGFloat(borderStrokeWidth) / 2)
-                    
-                            .onAppear {
-                                let topArea = geometry.safeAreaInsets.top
-                                startAtTop = topArea > 20
-                            }
-                }
-                   
-            )
-        }
     }
+}
 
 
 
